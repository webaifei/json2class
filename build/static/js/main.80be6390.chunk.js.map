{"version":3,"sources":["utils.js","App.js","reportWebVitals.js","index.js"],"names":["TYPES","String","Number","Null","Undefined","Array","Object","is","value","type","prototype","toString","call","isTimestamp","test","App","useState","code","setCode","jsonStr","setJsonStr","modelName","setModelName","error","needDateFormat","useRef","template","Handlebars","compile","formatJSONAndGetComputed","useCallback","json","console","log","s","computed","key","current","charAt","toUpperCase","slice","useEffect","JSON","parse","newCode","err","className","message","placeholder","onChange","e","target","width","mode","theme","newValue","name","editorProps","$blockScrolling","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAAaA,G,MAAQ,CACnBC,OAAQ,SACRC,OAAQ,SACRC,KAAM,OACNC,UAAW,YACXC,MAAO,QACPC,OAAQA,SASGC,EAAK,SAACC,EAAOC,GACxB,OAAOH,OAAOI,UAAUC,SAASC,KAAKJ,KAA/B,kBAAqDC,EAArD,MAQII,EAAc,SAACL,GAC1B,MAAO,SAASM,KAAKN,I,wBC+GRO,MA7Hf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGqBJ,mBAAS,IAH9B,mBAGNK,EAHM,KAGKC,EAHL,OAIaN,mBAAS,IAJtB,mBAINO,EAJM,KAKTC,GALS,KAKQC,kBAAO,IAsCtBC,EAAWC,IAAWC,QArCR,48BAsCdC,EAA4BC,uBAChC,SAACC,GACCC,QAAQC,IAAIF,EAAM,YAClB,ID3BqBG,EC2BfC,EAAW,GACjB,IAAI,IAAIC,KAAOL,EAAM,CACnBC,QAAQC,IAAIG,EAAK,OACjBZ,EAAea,SAAU,EACzB,IAAM7B,EAAQuB,EAAKK,GAChBvB,EAAYL,IACbuB,EAAKK,GAAL,OACAD,EAAS,eAAD,QDlCSD,ECkCkBE,EDjC1B,kBAANF,EAAuB,GAC3BA,EAAEI,OAAO,GAAGC,cAAgBL,EAAEM,MAAM,MCgCnC,4CACoBJ,EADpB,oCAGAZ,EAAea,SAAU,GACjB9B,EAAGC,EAAOR,EAAMK,OACxB0B,EAAKK,GAAL,KACQ7B,EAAGC,EAAOR,EAAMG,OAASI,EAAGC,EAAOR,EAAMM,QACjDyB,EAAKK,GAAL,KAEAL,EAAKK,GAAL,OAGJ,OAAOD,IAET,IAmBF,OAjBAM,qBAAU,WACR,GAAGtB,EACD,IACE,IAAIY,EAAOW,KAAKC,MAAMxB,GAChBgB,EAAWN,EAAyBE,GACpCa,EAAUlB,EAAS,CAACK,OAAKI,WAAUd,YAAWG,eAAgBA,EAAea,UACnFL,QAAQC,IAAIW,EAASb,EAAK,WAC1Bb,EAAQ0B,GACR,MAAMC,GAENb,QAAQC,IAAIY,GAIhB,OAAO,eAEN,CAAC1B,EAASO,EAAUL,EAAWQ,IAEhC,sBAAKiB,UAAU,MAAf,UACE,mBAAGA,UAAU,aAAb,kDAGA,4BAAIvB,EAAMwB,UACV,uBACED,UAAU,eAAerC,KAAK,OAAOD,MAAOa,EAAW2B,YAAY,sCAAsCC,SAAU,SAACC,GAChH5B,EAAa4B,EAAEC,OAAO3C,UAE5B,sBAAKsC,UAAU,UAAf,UACE,qBAAKA,UAAU,OAAf,SACE,cAAC,IAAD,CACEM,MAAM,OACNC,KAAK,OACLC,MAAM,iBACNL,SAAU,SAACM,GACTnC,EAAWmC,IAEbC,KAAK,mBACLC,YAAa,CAAEC,iBAAiB,OAGpC,qBAAKZ,UAAU,QAAf,SACE,cAAC,IAAD,CACEM,MAAM,OACNC,KAAK,aACL7C,MAAOS,EACPqC,MAAM,kBACNE,KAAK,qBACLC,YAAa,CAAEC,iBAAiB,cCpH7BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.80be6390.chunk.js","sourcesContent":["export const TYPES = {\n  String: 'String',\n  Number: 'Number',\n  Null: 'Null',\n  Undefined: 'Undefined',\n  Array: 'Array',\n  Object: Object,\n\n}\n/**\n * 判断是否是指定的类型\n * @param {any} value 要判断类型的值\n * @param {enum} type 类型\n * @returns {boolean}\n */\nexport const is = (value, type)=> {\n  return Object.prototype.toString.call(value) === `[object ${type}]`\n}\n\n/**\n * 判断是否是时间戳\n * @param {string|number} value 要判断的值\n * @returns {boolean}\n */\nexport const isTimestamp = (value)=> {\n  return /\\d{13}/.test(value)\n}\n/**\n * 首字母大写\n * @param {string} s 要修改的string\n */\nexport const capitalize = (s) => {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}","\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport Handlebars from 'handlebars';\nimport AceEditor from \"react-ace\";\nimport './App.css';\nimport { is, TYPES, isTimestamp, capitalize } from './utils';\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/theme-solarized_dark\";\nimport \"ace-builds/src-noconflict/theme-solarized_light\";\n\nfunction App() {\n  const [code, setCode] = useState('');\n  const [jsonStr, setJsonStr] = useState('');\n  const [modelName, setModelName] = useState('');\n  const [error, setError] = useState('');\n  let needDateFormat = useRef(false);\n  const templateSource = `\n    import { makeAutoObservable, toJS } from 'mobx';\n    {{#if needDateFormat}}\n    import dayjs from 'dayjs';\n    import { dateFormat } from '@config/index';\n    {{/if}}\n\n    /**\n     * {{modelName}}\n     */\n    export default class {{modelName}} {\n      {{#each json}}\n      {{{@key}}} = {{{@this}}};\n      {{/each}}\n      // 你可以精细的控制赋值的过程\n      constructor(json) {\n        makeAutoObservable(this);\n        // const {id} = json;\n        // this.id = id;\n        Object.assign(this, json);\n      }\n\n      {{#each computed}}\n      {{{@key}}} = {{{@this}}};\n      {{/each}}\n      // 你可以精细的控制赋值的过程\n      updateFromJson(json) {\n        // const {id} = json;\n        // this.id = id;\n        // ...\n        Object.assign(this, json);\n      }\n      toJSON() {\n        return toJS(this);\n      }\n    }\n    `;\n  const template = Handlebars.compile(templateSource);\n  const formatJSONAndGetComputed  = useCallback(\n    (json) => {\n      console.log(json, 'origin--');\n      const computed = {};\n      for(let key in json) {\n        console.log(key, 'key')\n        needDateFormat.current = false;\n        const value = json[key];\n        if(isTimestamp(value)) {\n          json[key]=`'--'`;\n          computed[`get computed${capitalize(key)}`] = `() {\n          return dayjs(this.${key}).format(dateFormat)\n        };`;\n          needDateFormat.current = true;\n        } else if(is(value, TYPES.Array)) {\n          json[key]= `[]`;\n        } else if(is(value, TYPES.Null) || is(value, TYPES.Object)) {\n          json[key]= `{}`;\n        } else  {\n          json[key] = `'--'`;\n        }\n      }\n      return computed;\n    },\n    [],\n  )\n  useEffect(() => {\n    if(jsonStr) {\n      try {\n        let json = JSON.parse(jsonStr);\n        const computed = formatJSONAndGetComputed(json);\n        const newCode = template({json,computed, modelName, needDateFormat: needDateFormat.current});\n        console.log(newCode, json,'newCode');\n        setCode(newCode);\n      } catch(err) {\n        // setError(err);\n        console.log(err);\n      }\n\n    }\n    return () => {\n    }\n  }, [jsonStr, template, modelName, formatJSONAndGetComputed]);\n  return (\n    <div className=\"App\">\n      <p className=\"App-header\">\n      Generate Mobx Model class with JSON.\n      </p>\n      <p>{error.message}</p>\n      <input\n        className=\"form-control\" type=\"text\" value={modelName} placeholder=\"input your model name e.g TestModel\" onChange={(e)=> {\n            setModelName(e.target.value);\n      }}/>\n      <div className=\"content\">\n        <div className=\"left\">\n          <AceEditor\n            width=\"100%\"\n            mode=\"json\"\n            theme=\"solarized_dark\"\n            onChange={(newValue)=> {\n              setJsonStr(newValue);\n            }}\n            name=\"UNIQUE_ID_OF_DIV\"\n            editorProps={{ $blockScrolling: true }}\n          />\n        </div>\n        <div className=\"right\">\n          <AceEditor\n            width=\"100%\"\n            mode=\"javascript\"\n            value={code}\n            theme=\"solarized_light\"\n            name=\"UNIQUE_ID_OF_DIV_2\"\n            editorProps={{ $blockScrolling: true }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}